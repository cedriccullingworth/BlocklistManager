// <auto-generated />
using System;
using BlocklistManager.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlocklistManager.Migrations
{
    [DbContext(typeof(BlocklistDbContext))]
    [Migration("20241219130742_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlocklistManager.Models.FileType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "Name" }, "IX_FileType_Name")
                        .IsUnique();

                    b.ToTable("FileType");
                });

            modelBuilder.Entity("BlocklistManager.Models.RemoteSite", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("FileTypeID")
                        .HasColumnType("int");

                    b.Property<string>("FileUrls")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("LastDownloaded")
                        .HasColumnType("datetime2");

                    b.Property<int>("MinimumIntervalMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SiteUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "FileTypeID" }, "IX_RemoteSite_FileTypeID");

                    b.HasIndex(new[] { "Name", "SiteUrl" }, "IX_RemoteSite_Name")
                        .IsUnique();

                    b.ToTable("RemoteSite");
                });

            modelBuilder.Entity("BlocklistManager.Models.RemoteSite", b =>
                {
                    b.HasOne("BlocklistManager.Models.FileType", "FileType")
                        .WithMany("RemoteSites")
                        .HasForeignKey("FileTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FileType");
                });

            modelBuilder.Entity("BlocklistManager.Models.FileType", b =>
                {
                    b.Navigation("RemoteSites");
                });
#pragma warning restore 612, 618
        }
    }
}
